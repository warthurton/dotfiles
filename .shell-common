#-----------------------------------------------------------------------------
# shellcheck shell=bash

[[ -s "$HOME/.shell-prv" ]] && source "$HOME/.shell-prv"

# OS X ---------------------------------------------------------------------
if [[ "${OSTYPE:0:6}" = "darwin" ]]; then
  alias ls="/bin/ls -FG"
  alias l="ls -lO"
  alias p="ps -Af"
  alias start="simple_launchctl load"
  alias stop="simple_launchctl unload"

  simple_launchctl() {
    find ~/Library/LaunchAgents -name '*.plist' -name '*'"$2"'*' -ok launchctl "$1" -w {} \;
  }

  flushdns() {
    dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
  }
  alias dnsflush="flushdns"

  rebuild_launch_services() {
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
  }

  keychain-environment-variable() {
    security find-generic-password -w -a "${USER}" -D ENV -s "${1}"
  }

  set-keychain-environment-variable() {
    [[ -z "$1" ]] && return 1

    read -r -s "?Enter Value for ${1}: " secret

    [[ -z "$secret" ]] && return 1

    security add-generic-password -U -a "${USER}" -D ENV -s "${1}" -w "${secret}"
  }

  myapps() {
    find /Applications -type d -uid "$(id -u)" -maxdepth 1 | sed -e 's,/Applications/,,' -e 's/\.app//' | tr 'A-Z' 'a-z' | tr ' ' '-' | sort
  }

  not_casked() {
    myapps | while read -r _cask; do brew list --cask "$_cask" >&/dev/null || echo "$_cask is not casked"; done
  }

# Linux ---------------------------------------------------------------------
elif [[ "${OSTYPE:0:5}" = "linux" ]]; then
  command -v tty >&/dev/null && export GPG_TTY=$(tty)

  alias ls="/bin/ls --color=auto -F"
  alias l="ls -l"
  alias p="ps auxOU"
  alias ubuntu_add_key='sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80'
fi
# ---------------------------------------------------------------------------
# if command -v nvim > /dev/null 2> /dev/null; then
#   alias vim=nvim
#   alias v=nvim
#   alias n=nvim
# fi
# ---------------------------------------------------------------------------
alias be="bundle exec"
alias list_to_regex="sed -e 's/[^0-9]//g' | tr '\n' '|' | sed -e 's/^/(/' -e 's/\|$/)/'"
alias m='$PAGER'
alias l1="ls -1"
alias ll="l -A"
alias la="ls -A"
alias live_ip='dig +short myip.opendns.com @resolver1.opendns.com || curl -f4L http://ifconfig.me'
alias to_csv='soffice --convert-to csv --headless'
# ---------------------------------------------------------------------------
predate() {
  while read -r line; do
    printf '%(%F %T)T %s\n' -1 "$line"
  done
}

ps_owners() {
  [[ -n "${BASH_VERSINFO[0]}" && "${BASH_VERSINFO[0]}" -lt 4 ]] && return 1
  [[ -n "${BASH_VERSINFO[1]}" && "${BASH_VERSINFO[1]}" -lt 4 ]] && return 1

  local _pid="${1:-$$}"

  [[ $_pid -eq 0 ]] && return
  command -v ps >&/dev/null || return

  read -r _uid _user _ppid _command < <(ps -o uid=,user=,ppid=,command= -p "$_pid")

  echo "$_pid $_user $_uid $_ppid \"$_command\""

  ps_owners "$_ppid"
}

am_i_someone_else() {
  [[ -n "${BASH_VERSINFO[0]}" && "${BASH_VERSINFO[0]}" -lt 4 ]] && return 1
  [[ -n "${BASH_VERSINFO[1]}" && "${BASH_VERSINFO[1]}" -lt 4 ]] && return 1

  pgrep -u 0 >&/dev/null || return 1
  [[ $EUID -eq 0 ]] && return 1

  local -a _owners
  local -A _counts

  while read -r _pid _user _uid _ppid _command; do
    if [[ -z "${_counts[$_user]}" ]]; then
      _owners+=("$_user")
      _counts[$_user]=1
    else
      ((_counts[$_user]++))
    fi
  done < <(ps_owners)

  if [[ "${#_owners[@]}" -le 2 && "${_owners[-1]}" == "root" ]]; then
    return 1
  else
    return 0
  fi
}

zero_width_space() {
  echo -n '\u200D'
}

httpd() {
  port="${1:-8000}"

  command -v open >&/dev/null && (sleep 1 && open "http://127.0.0.1:$port" &)
  python -m SimpleHTTPServer "$port"
}

# node ---------------------------------------------------------------------
if command -v npx >&/dev/null; then
  alias npx='npx --no-install'
fi

# Git ---------------------------------------------------------------------
if [[ -d "$HOME/.git-pub-dotfiles" ]]; then
  pubgit() {
    git --git-dir="$HOME/.git-pub-dotfiles" --work-tree="$HOME" "$@"
  }
fi

if [[ -d "$HOME/.git-prv-dotfiles" ]]; then
  prvgit() {
    git --git-dir="$HOME/.git-prv-dotfiles" --work-tree="$HOME" "$@"
  }
fi

alias g=git
alias gst='git status'
alias gco='git checkout'
alias gps='git push'
alias gpl='git pull'
alias r='cd "$(git root)"'
# fzf ------------------------------------------------------------------------
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short \
    | fzf-down -m --ansi --nth 2..,.. \
      --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' \
    | cut -c4- | sed 's/.* -> //'
}

_gb() {
  is_in_git_repo || return
  git branch -a --color=always \
    | grep -v '/HEAD\s' \
    | sort \
    | fzf-down --ansi \
      --multi \
      --tac \
      --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES \
    | sed 's/^..//' \
    | cut -d' ' -f1 \
    | sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname \
    | fzf-down --multi --preview-window right:70% \
      --preview 'git show --color=always {} | head -'$LINES
}

_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always \
    | fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
      --header 'Press CTRL-S to toggle sort' \
      --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES \
    | grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq \
    | fzf-down --tac \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' \
    | cut -d$'\t' -f1
}

#-----------------------------------------------------------------------------
[[ -z "$PS1" ]] && return
[[ "${XPC_SERVICE_NAME:0:13}" == "com.jetbrains" ]] && return # RubyyMine etc...
#-----------------------------------------------------------------------------
# if [[ -s "$HOME/.config/base16-shell" ]]; then
#   export BASE16_SHELL="$HOME/.config/base16-shell"
#   export BASE16_THEME="base16-twilight"
#   eval "$("$BASE16_SHELL"/profile_helper.sh)"
# fi
#
# [[ -s "$HOME/.base16_theme" ]] && source "$HOME/.base16_theme"

# --------------------------------------------------------------------------
# vim: set syntax=sh ft=sh sw=2 ts=2 expandtab:
